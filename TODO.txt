GeometricObject::draw() pode ser const.
Adicionar um "NamedDisplayFile", que permite nomear os nomes dos objetos.
    Incluir métodos como add( TransformableObject * obj, string name ),
    transform( string name, const LinearTransform<2> * ),
    remove( string name ),
    propagate( string name, void (*visitor)( TransformableObject * ) ).
Organizar em subdiretórios
Remover as definições de métodos das definições da classe
    Usar inline se necessário
Implementar ScreenRenderer::drawPolygon();
Implementar testes:
    ClippingArea
    DisplayFile
    ScreenRenderer
    ViewportTransform
    WindowTransform
    DrawablePoint
    Polygon
    TesterDrawable
    LineClipper

Implementar PolyIterator para forward differences.
Implementar operadores de Matrix para propagar uma operação genérica.
Adicionar verificação this != other nos construtores de cópia.

Os testes dependem do comando __attribute__, específico do GCC. 
    Entretanto, a única solução alternativa que conheço (gambiarras
    com objetos estáticos) depende do fato de o GCC escolher executar
    o construtor destes objetos antes de executar o main(), algo
    que não é garantido pelo C++.

Embora lineClipper seja uma interface templatizada, o método setArea
    trabalha com ClippingArea, que é bidimensional. Se possível,
    generalizar a área de clipping para ser n-dimensional.

Da forma como está implementado atualmente, o line clipper tem de ser
    informado, a cada uso, qual a área de clipping utilizada.
    Seria interessante se o line clipper mantivesse um ponteiro
    para a área de clipping, para o caso de esta área ser alterada
    extenamente e a mudança se refletir dentro do clipper.

Implementar Matrix::operator=( initializer_list<initializer_list<double>> )

Vários .cpp que implementam .h incluem todos os cabeçalhos incluídos
    pelo .h desnecessariamente.


        Problemas / possíveis aprimoramentos:

WindowTransform
    Uma chamada ao método window() da transformada de window pode
    criar uma referência externa ao objeto interno window que
    pode ser usada para modificar este objeto sem o conhecimento
    da transformada.

    A WindowTransform é um operador linear: talvez poderíamos tratá-la
    como tal.

DrawablePoint
    Ao invés de codificar a rotação de DrawablePoint::draw no braço,
    podemos usar as transformações lineares para isso.

TesterMatrix
    Este header inclui cstdio, o que não me parece ser muito bonito.
    Veja testerDouble, por exemplo: cstdio só é incluído no .cpp.
